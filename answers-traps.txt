1. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?

a0 >> "%d %d\n"
a1 >> f(8)+1
a2 >> 13

2. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)

compiled optimized

3. At what address is the function printf located?

64a

4. What value is in the register ra just after the jalr to printf in main?

ra = 30

5. Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?

Here's a description of little- and big-endian and a more whimsical description.


0x00646c72 >>   72 6c 64 00
                r  l  d  0
He110 World

6. In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);
      
second args is in stack, a random number



===========================\\\
1. 系统调用 sigalarm 

test1() user/alarmtest.c:	
sigalarm at user/usys.S:trap
call 进入trap
#3  0x0000000000000118 in ?? ()
#2  0x0000000080001d78 in usertrap () at kernel/trap.c:67
#1  0x00000000800020a6 in syscall () at kernel/syscall.c:145
#0  sys_sigalarm () at kernel/sysproc.c:99

2. 时钟中断 0.1s

timervec kernel/kernelvec.S:95 触发时钟中断，进入trap
uservec kernel/trampoline.S:22 进入trap保存寄存器
usertrap kernel/trap.c:80 epc >> periodic
userret kernel/trampoline.S:101 退出trap恢复寄存器

开始执行periodic，这个时候进入trap执行的函数和退出trap执行的函数不一样，但是寄存器恢复前一个函数的寄存器

比如
